---
import '../../styles/article.css';

import ImageGlow from "../../components/ImageGlow.astro";
import Card from "../../components/Card.astro";
import TOC from "../../components/TOC.astro";
import Layout from "../../layouts/Layout.astro";


import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";
import { getCollection } from "astro:content";
import { giscus } from 'spectre:globals';

/**
 * Estimates the time it takes to read a post in minutes based on:
 * - A reading speed of 200 words per minute
 * - 10 seconds per image
 * - 20 seconds per code block
 * 
 * @param post The post to estimate the reading time for
 */
function timeToRead(post: CollectionEntry<'posts'>): number {
  const numWords = (post.body || "")
    .replace(/.*\[(.*?)\].*/gm, "$1")
    .replace(/```.*?```/gms, "")
    .split(/\s+/).length;

  const numImages = post.body?.match(/!\[/g)?.length || 0;
  const numCodeblocks = post.body?.match(/```/g)?.length || 0;

  return Math.ceil(numWords / 200) + Math.ceil(numImages / 6) + Math.ceil(numCodeblocks / 3);
};

interface Props {
  post: CollectionEntry<'posts'>;
}

const { post } = Astro.props;

export const getStaticPaths = (async () => {
  const posts = await getCollection('posts', (post) => post.data.draft !== true);

  return posts.map((post) => ({ params: { post: post.id }, props: { post } }));
}) satisfies GetStaticPaths;

const { Content, headings } = await render(post);
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.image}
  article={{
    createdAt: post.data.createdAt,
    updatedAt: post.data.updatedAt,
  }}
>
  <div class="left" slot="left">
    {/*<Card class="toc-card">
      <h2 class="no-mt">Table of contents</h2>
      <ol>
        <li class="toc-li">
          <a href={`#_top`} class="active">{post.data.title}</a>
        </li>
        {headings.map((heading, i) => (
          <li class="toc-li" data-depth={heading.depth}>
            <a href={`#${heading.slug}`}>{heading.text}</a>
          </li>
        ))}
      </ol>
    </Card> */}
  <TOC headings = {headings} title={post.data.title}></TOC>
  </div>
  <article slot="right" data-pagefind-body>
    <Card>
      <div class="article-header" id="_top" data-pagefind-ignore>
        <ImageGlow quality={100} class="article-image" src={post.data.image} alt={post.data.title} />
        <div class="header">
          <div>
            <h1 class="no-mt article-h1">{post.data.title}</h1>
          </div>
          <div class="article-info">
            <span>{post.data.createdAt.toLocaleDateString()}</span>
            <span>/</span>
            <span>{timeToRead(post)} minute{timeToRead(post) === 1 ? "" : "s"} to read</span>
            <span>/</span>
            <span>Tags: {post.data.tags.map((tag) => tag.id).join(", ")}</span>
          </div>
        </div>
      </div>
      <Content />
      <hr class="end-of-article" />
      <a href="/blog" class="block-link" data-pagefind-ignore>‚Üê Back to blog</a>
    </Card>
    {giscus && (
      <Card>
        <div class="comments" data-pagefind-ignore>
          <script
            is:inline
            src="https://giscus.app/client.js"
            data-repo={giscus.repository}
            data-repo-id={giscus.repositoryId}
            data-category={giscus.category}
            data-category-id={giscus.categoryId}
            data-mapping={giscus.mapping}
            data-strict={giscus.strict === true ? "1" : "0"}
            data-reactions-enabled={giscus.reactionsEnabled === true ? "1" : "0"}
            data-emit-metadata={giscus.emitMetadata === true ? "1" : "0"}
            data-input-position={giscus.commentsInput}
            data-theme={giscus.theme || "https://spectre.louisescher.dev/styles/giscus"}
            data-lang={giscus.lang}
            data-loading="lazy"
            crossorigin="anonymous"
            async
          />
        </div>
      </Card>
    )}
  </article>
</Layout>
<script src="../../scripts/toc.ts" />
<style is:global>
  .toc-card ol {
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: .5rem;
    margin-bottom: 0;
    list-style-type: none;
    position: relative;
  }

  .toc-card ol li a {
    color: #c7c7c7;
    font-size: .925rem;
    padding: .25rem .5rem;
    box-decoration-break: clone;
    -webkit-box-decoration-break: clone;
  }

  .toc-card ol li a:hover {
    color: white;
    text-decoration: none;
  }

  .toc-card ol li a.active {
    color: white;
    background: var(--primary);
  }

  .left {
    height: 100%;
    position: relative;
  }

  .toc-card {
    position: sticky;
    top: 2rem;
  }

  article {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .comments * {
    border-color: #353535 !important;
  }

  @media screen and (max-width: 640px) {
    article {
      gap: 1rem;
    }
  }
</style>